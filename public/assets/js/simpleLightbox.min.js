!function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory();
    } else {
        global.SimpleLightbox = factory();
    }
}(this, function () {

    function extend(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            if (source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    }

    function addClass(el, className) {
        if (el && className) {
            el.className += " " + className;
        }
    }

    function removeClass(el, className) {
        if (el && className) {
            el.className = el.className.replace(new RegExp("(\\s|^)" + className + "(\\s|$)"), " ").trim();
        }
    }

    function createElementFromHTML(html) {
        var div = document.createElement("div");
        div.innerHTML = html.trim();
        return div.childNodes[0];
    }

    function matches(el, selector) {
        return (el.matches || el.matchesSelector || el.msMatchesSelector).call(el, selector);
    }

    function SimpleLightbox(options) {
        this.init.apply(this, arguments);
    }

    SimpleLightbox.defaults = {
        elementClass: "",
        elementLoadingClass: "slbLoading",
        htmlClass: "slbActive",
        closeBtnClass: "",
        nextBtnClass: "",
        prevBtnClass: "",
        loadingTextClass: "",
        closeBtnCaption: "Close",
        nextBtnCaption: "Next",
        prevBtnCaption: "Previous",
        loadingCaption: "Loading...",
        bindToItems: true,
        closeOnOverlayClick: true,
        closeOnEscapeKey: true,
        nextOnImageClick: true,
        showCaptions: true,
        captionAttribute: "title",
        urlAttribute: "href",
        startAt: 0,
        loadingTimeout: 100,
        appendTarget: "body",
        beforeSetContent: null,
        beforeClose: null,
        afterClose: null,
        beforeDestroy: null,
        afterDestroy: null,
        videoRegex: new RegExp(/youtube.com|vimeo.com/)
    };

    extend(SimpleLightbox.prototype, {
        init: function (opts) {
            opts = this.options = extend({}, SimpleLightbox.defaults, opts);
            var items = [];
            var self = this;

            if (opts.$items) {
                items = opts.$items.get();
            }
            if (opts.elements) {
                items = [].slice.call(
                    typeof opts.elements === "string" ? document.querySelectorAll(opts.elements) : opts.elements
                );
            }

            this.eventRegistry = { lightbox: [], thumbnails: [] };
            this.items = [];
            this.captions = [];

            if (items) {
                items.forEach(function (el, index) {
                    self.items.push(el.getAttribute(opts.urlAttribute));
                    self.captions.push(el.getAttribute(opts.captionAttribute));
                    if (opts.bindToItems) {
                        self.addEvent(el, "click", function (e) {
                            e.preventDefault();
                            self.showPosition(index);
                        }, "thumbnails");
                    }
                });
            }

            if (opts.items) this.items = opts.items;
            if (opts.captions) this.captions = opts.captions;
        },

        addEvent: function (el, event, callback, registry) {
            (registry = registry || "lightbox");
            this.eventRegistry[registry].push({ element: el, eventName: event, callback: callback });
            el.addEventListener(event, callback);
            return this;
        },

        removeEvents: function (type) {
            this.eventRegistry[type].forEach(function (evt) {
                evt.element.removeEventListener(evt.eventName, evt.callback);
            });
            this.eventRegistry[type] = [];
            return this;
        },

        next: function () { return this.showPosition(this.currentPosition + 1); },
        prev: function () { return this.showPosition(this.currentPosition - 1); },

        normalizePosition: function (pos) {
            if (pos >= this.items.length) pos = 0;
            if (pos < 0) pos = this.items.length - 1;
            return pos;
        },

        showPosition: function (pos) {
            var normalized = this.normalizePosition(pos);
            this.direction = this.currentPosition !== undefined
                ? normalized > this.currentPosition ? "next" : "prev"
                : undefined;
            this.currentPosition = normalized;
            return this.setupLightboxHtml().prepareItem(this.currentPosition, this.setContent).show();
        },

        loading: function (show) {
            var self = this, opts = this.options;
            if (show) {
                this.loadingTimeout = setTimeout(function () {
                    addClass(self.$el, opts.elementLoadingClass);
                    self.$content.innerHTML = '<p class="slbLoadingText ' + opts.loadingTextClass + '">' + opts.loadingCaption + "</p>";
                    self.show();
                }, opts.loadingTimeout);
            } else {
                removeClass(this.$el, opts.elementLoadingClass);
                clearTimeout(this.loadingTimeout);
            }
        },

        prepareItem: function (index, callback) {
            var self = this;
            var item = this.items[index];
            this.loading(true);

            if (this.options.videoRegex.test(item)) {
                callback.call(self, createElementFromHTML('<div class="slbIframeCont"><iframe class="slbIframe" frameborder="0" allowfullscreen src="' + item + '"></iframe></div>'));
            } else {
                var wrap = createElementFromHTML('<div class="slbImageWrap"><img class="slbImage" src="' + item + '" /></div>');
                this.$currentImage = wrap.querySelector(".slbImage");
                if (this.options.showCaptions && this.captions[index]) {
                    wrap.appendChild(createElementFromHTML('<div class="slbCaption">' + this.captions[index] + "</div>"));
                }
                this.loadImage(item, function () {
                    self.setImageDimensions();
                    callback.call(self, wrap);
                    self.loadImage(self.items[self.normalizePosition(self.currentPosition + 1)]);
                });
            }
            return this;
        },

        loadImage: function (src, callback) {
            if (!this.options.videoRegex.test(src)) {
                var img = new Image();
                if (callback) img.onload = callback;
                img.src = src;
            }
        },

        setupLightboxHtml: function () {
            var opts = this.options;
            if (!this.$el) {
                this.$el = createElementFromHTML(
                    '<div class="slbElement ' + opts.elementClass + '">' +
                    '<div class="slbOverlay"></div>' +
                    '<div class="slbWrapOuter">' +
                    '<div class="slbWrap">' +
                    '<div class="slbContentOuter">' +
                    '<div class="slbContent"></div>' +
                    '<button type="button" title="' + opts.closeBtnCaption + '" class="slbCloseBtn ' + opts.closeBtnClass + '">Ã—</button>' +
                    (this.items.length > 1 ? '<div class="slbArrows">' +
                        '<button type="button" title="' + opts.prevBtnCaption + '" class="prev slbArrow' + opts.prevBtnClass + '">' + opts.prevBtnCaption + '</button>' +
                        '<button type="button" title="' + opts.nextBtnCaption + '" class="next slbArrow' + opts.nextBtnClass + '">' + opts.nextBtnCaption + '</button>' +
                        '</div>' : '') +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>'
                );
                this.$content = this.$el.querySelector(".slbContent");
            }
            this.$content.innerHTML = "";
            return this;
        },

        show: function () {
            if (!this.modalInDom) {
                document.querySelector(this.options.appendTarget).appendChild(this.$el);
                addClass(document.documentElement, this.options.htmlClass);
                this.setupLightboxEvents();
                this.modalInDom = true;
            }
            return this;
        },

        setContent: function (content) {
            var el = typeof content === "string" ? createElementFromHTML(content) : content;
            this.loading(false);
            this.setupLightboxHtml();
            removeClass(this.$content, "slbDirectionNext");
            removeClass(this.$content, "slbDirectionPrev");
            if (this.direction) addClass(this.$content, this.direction === "next" ? "slbDirectionNext" : "slbDirectionPrev");
            if (this.options.beforeSetContent) this.options.beforeSetContent(el, this);
            this.$content.appendChild(el);
            return this;
        },

        setImageDimensions: function () {
            if (this.$currentImage) {
                this.$currentImage.style.maxHeight = (window.innerHeight || document.documentElement.offsetHeight) + "px";
            }
        },

        setupLightboxEvents: function () {
            if (!this.eventRegistry.lightbox.length) {
                this.addEvent(this.$el, "click", function (e) {
                    var target = e.target;
                    if (matches(target, ".slbCloseBtn") || (this.options.closeOnOverlayClick && matches(target, ".slbWrap"))) {
                        this.close();
                    } else if (matches(target, ".slbArrow")) {
                        matches(target, ".next") ? this.next() : this.prev();
                    } else if (this.options.nextOnImageClick && this.items.length > 1 && matches(target, ".slbImage")) {
                        this.next();
                    }
                }.bind(this))
                    .addEvent(document, "keyup", function (e) {
                        if (this.options.closeOnEscapeKey && e.keyCode === 27) this.close();
                        if (this.items.length > 1) {
                            if (e.keyCode === 39 || e.keyCode === 68) this.next();
                            if (e.keyCode === 37 || e.keyCode === 65) this.prev();
                        }
                    }.bind(this))
                    .addEvent(window, "resize", function () { this.setImageDimensions(); }.bind(this));
            }
            return this;
        },

        close: function () {
            if (this.modalInDom) {
                this.runHook("beforeClose");
                this.removeEvents("lightbox");
                if (this.$el && this.$el.parentNode) this.$el.parentNode.removeChild(this.$el);
                removeClass(document.documentElement, this.options.htmlClass);
                this.modalInDom = false;
                this.runHook("afterClose");
            }
            this.direction = undefined;
            this.currentPosition = this.options.startAt;
        },

        destroy: function () {
            this.close();
            this.runHook("beforeDestroy");
            this.removeEvents("thumbnails");
            this.runHook("afterDestroy");
        },

        runHook: function (hook) {
            if (this.options[hook]) this.options[hook](this);
        }
    });

    SimpleLightbox.open = function (opts) {
        var instance = new SimpleLightbox(opts);
        return opts.content ? instance.setContent(opts.content).show() : instance.showPosition(instance.options.startAt);
    };

    SimpleLightbox.registerAsJqueryPlugin = function ($) {
        $.fn.simpleLightbox = function (opts) {
            var instance;
            this.each(function () {
                if (!$.data(this, "simpleLightbox")) {
                    instance = instance || new SimpleLightbox($.extend({}, opts, { $items: this }));
                    $.data(this, "simpleLightbox", instance);
                }
            });
        };
        $.SimpleLightbox = SimpleLightbox;
    };

    if (typeof window !== "undefined" && window.jQuery) {
        SimpleLightbox.registerAsJqueryPlugin(window.jQuery);
    }

    return SimpleLightbox;
});
